{"ast":null,"code":"import * as actions from '../actions/general.act';\nimport * as Functions from '../common/functions/functions';\n\nvar axios = require('axios');\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type == 'API') {\n        var SERVER_ENDPOINT = \"http://localhost:3000/moviesList\";\n        var OMDb_API = 'http://www.omdbapi.com/?apikey=81d51a00';\n        var _action$payload = action.payload,\n            type = _action$payload.type,\n            method = _action$payload.method,\n            index = _action$payload.index,\n            newData = _action$payload.newData,\n            newDatas = _action$payload.newDatas,\n            id = _action$payload.id,\n            currentDb = _action$payload.currentDb;\n        var api = {\n          'get': function get() {\n            axios.get(SERVER_ENDPOINT).then(function (res) {\n              store.dispatch(actions.api(type, res.data));\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          },\n          'post': function post(newMovie) {\n            axios.post(SERVER_ENDPOINT, newMovie).then(function (res) {\n              store.dispatch(actions.api(type, newMovie));\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          },\n          'put': function put() {\n            axios.put(SERVER_ENDPOINT + '/' + index + '/', newData).then(function (res) {\n              store.dispatch(actions.api(type, newDatas));\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          },\n          'delete': function _delete() {\n            axios.delete(SERVER_ENDPOINT + '/' + index + '/').then(function (res) {\n              store.dispatch(actions.api(type, newDatas));\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          }\n        };\n\n        if (action.payload.first) {\n          var i;\n\n          (function () {\n            var _generateMovieId = function _generateMovieId(datas) {\n              var id = Math.floor(Math.random() * 1000 + 1);\n\n              while (_isIdExist(datas, id)) {\n                id = Math.floor(Math.random() * 1000 + 1);\n              }\n\n              return id;\n            };\n\n            var _isIdExist = function _isIdExist(datas, id) {\n              var moviesList = this.props.general.moviesList;\n\n              for (var i = 0; i < datas.length; ++i) {\n                var movie = datas[i];\n\n                if (movie.id == id) {\n                  return true;\n                }\n              }\n\n              return false;\n            };\n\n            var movies = action.payload.moviesList;\n            var data = [];\n\n            for (i = 0; i < movies; ++i) {\n              axios.get(OMDb_API + '&t=' + movies[i].Title).then(function (response) {\n                var id = _generateMovieId(data);\n\n                var movie = response.data;\n                movie['id'] = id;\n                data.push(movie);\n                store.dispatch(actions.api('ADD', movie));\n              });\n            }\n          })();\n        }\n\n        if (type == 'ADD') {\n          var title = newData.title.replace(' ', '+');\n          axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then(function (respone) {\n            var newMovie = respone.data;\n            newMovie['id'] = id;\n\n            if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\n              api[method](newMovie);\n              store.dispatch(actions.isMovieExist(false));\n            } else {\n              store.dispatch(actions.isMovieExist(true));\n            }\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        } else {\n          api[method]();\n        }\n      }\n\n      return next(action);\n    };\n  };\n});","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\my-new-app\\src\\middleware\\general.mid.js"],"names":["actions","Functions","axios","require","store","next","action","type","SERVER_ENDPOINT","OMDb_API","payload","method","index","newData","newDatas","id","currentDb","api","get","then","res","dispatch","data","catch","err","console","log","newMovie","post","put","delete","first","i","_generateMovieId","datas","Math","floor","random","_isIdExist","moviesList","props","general","length","movie","movies","Title","response","push","title","replace","year","respone","isMovieExist","imdbID"],"mappings":"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","sourcesContent":["import * as actions from '../actions/general.act';\r\nimport * as Functions from '../common/functions/functions';\r\n\r\nconst axios = require('axios');\r\n\r\nexport default store => next => action => {\r\n    if (action.type == 'API') {\r\n        const SERVER_ENDPOINT = \"http://localhost:3000/moviesList\";\r\n        const OMDb_API = 'http://www.omdbapi.com/?apikey=81d51a00';\r\n\r\n        let { type, method, index, newData, newDatas, id, currentDb } = action.payload;\r\n\r\n        let api = {\r\n            'get': () => {\r\n                axios.get(SERVER_ENDPOINT).then((res) => {\r\n                    store.dispatch(actions.api(type, res.data))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'post': (newMovie) => {\r\n                axios.post((SERVER_ENDPOINT), newMovie).then((res) => {\r\n                    store.dispatch(actions.api(type, newMovie))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'put': () => {\r\n                axios.put((SERVER_ENDPOINT + '/' + index + '/'), newData).then((res) => {\r\n                    store.dispatch(actions.api(type, newDatas))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'delete': () => {\r\n                axios.delete(SERVER_ENDPOINT + '/' + index + '/').then((res) => {\r\n                    store.dispatch(actions.api(type, newDatas))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            }\r\n        }\r\n\r\n        if (action.payload.first) {\r\n            let movies = action.payload.moviesList;\r\n            let data = [];\r\n\r\n            for (var i = 0; i < movies; ++i) {\r\n                axios.get(OMDb_API + '&t=' + movies[i].Title ).then((response) => {\r\n                    let id = _generateMovieId(data);\r\n                    let movie = response.data;\r\n\r\n                    movie['id'] = id;\r\n                    data.push(movie);\r\n                    store.dispatch(actions.api('ADD', movie))\r\n                })\r\n            }\r\n\r\n\r\n\r\n            function _generateMovieId(datas) {\r\n                let id = Math.floor((Math.random() * 1000) + 1);\r\n\r\n                while (_isIdExist(datas, id)) {\r\n                    id = Math.floor((Math.random() * 1000) + 1);\r\n                }\r\n\r\n                return id;\r\n            }\r\n\r\n            function _isIdExist(datas, id) {\r\n                let moviesList = this.props.general.moviesList;\r\n\r\n                for (var i = 0; i < datas.length; ++i) {\r\n                    let movie = datas[i];\r\n\r\n                    if (movie.id == id) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (type == 'ADD') {\r\n            let title = newData.title.replace(' ', '+');\r\n\r\n            axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then((respone) => {\r\n                let newMovie = respone.data;\r\n\r\n                newMovie['id'] = id;\r\n                if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\r\n                    api[method](newMovie);\r\n                    store.dispatch(actions.isMovieExist(false))\r\n                }\r\n                else {\r\n                    store.dispatch(actions.isMovieExist(true))\r\n                }\r\n            })\r\n                .catch((err) => console.log(err))\r\n        }\r\n        else {\r\n            api[method]();\r\n        }\r\n    }\r\n    return next(action)\r\n}"]},"metadata":{},"sourceType":"module"}