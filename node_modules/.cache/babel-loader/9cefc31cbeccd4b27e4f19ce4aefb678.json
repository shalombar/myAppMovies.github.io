{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\src\\\\common\\\\AddNewMovie\\\\AddNewMovie.js\";\nimport React, { Component } from 'react'; // import './App.css';\n\nimport * as Functions from '../functions/functions';\nimport '../../css/movies/movies.css';\n\nvar AddNewMovie =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNewMovie, _Component);\n\n  function AddNewMovie(props) {\n    var _this;\n\n    _classCallCheck(this, AddNewMovie);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNewMovie).call(this, props));\n    _this.state = {\n      \"imdbID\": '',\n      title: '',\n      year: '',\n      runtime: '',\n      genre: '',\n      director: '',\n      inputsValidation: {\n        'year': true,\n        'title': true\n      },\n      isValid: true\n    };\n    return _this;\n  }\n\n  _createClass(AddNewMovie, [{\n    key: \"_add\",\n    value: function _add() {\n      var addFormData = {\n        title: this.state.title,\n        year: this.state.year\n      };\n\n      var id = this._generateMovieId();\n\n      var titleCorrectFormat = this._titleCorrectFormat(this.state.title);\n\n      addFormData.title = titleCorrectFormat;\n      this.props.addMovie(addFormData, id);\n    }\n  }, {\n    key: \"_generateMovieId\",\n    value: function _generateMovieId() {\n      var id = Math.floor(Math.random() * 1000 + 1);\n\n      while (this._isIdExist(id)) {\n        id = Math.floor(Math.random() * 1000 + 1);\n      }\n\n      return id;\n    }\n  }, {\n    key: \"_isIdExist\",\n    value: function _isIdExist(id) {\n      var moviesList = this.props.general.moviesList;\n\n      for (var i = 0; i < moviesList.length; ++i) {\n        var movie = moviesList[i];\n\n        if (movie.id == id) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_titleCorrectFormat\",\n    value: function _titleCorrectFormat(title) {\n      var titleToArray = title.split('');\n      var result = [];\n      result = Functions.cleanStringFromJunk(titleToArray);\n      result = Functions.cleanNumberAtMiddleOfWord(result);\n      result = Functions.setUpperlowerCase(result);\n      result = Functions.arrayToString(result);\n      return result;\n    }\n  }, {\n    key: \"_validation\",\n    value: function _validation(inputCheck) {\n      var validationObj = {\n        'year': function year(val) {\n          if (isNaN(val) || val.length != 4 || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'title': function title(val) {}\n      };\n      var InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\n      var inputsValidation = this.state.inputsValidation;\n\n      if (InputValidation.status == 'error') {\n        this.refs[inputCheck].classList.add('invalid');\n        inputsValidation[inputCheck] = false;\n        this.setState({\n          isValid: false,\n          inputsValidation: inputsValidation\n        });\n      } else if (InputValidation.status == 'ok') {\n        if (this.refs[inputCheck].className.includes('invalid')) {\n          this.refs[inputCheck].classList.remove('invalid');\n          inputsValidation[inputCheck] = true;\n          this.setState({\n            isValid: true,\n            inputsValidation: inputsValidation\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_renderButtons\",\n    value: function _renderButtons() {\n      var _this2 = this;\n\n      try {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"btnContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          \"data-toggle\": \"modal\",\n          \"data-target\": \"#add\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"Add\"))), React.createElement(\"div\", {\n          className: \"modal\",\n          id: \"add\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-dialog\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"modal-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Add New Movie \"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, \"\\xD7\")), React.createElement(\"div\", {\n          className: \"modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, 'Title: ', \" \"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          value: this.state.title,\n          ref: \"title\",\n          onChange: function onChange(e) {\n            _this2.setState({\n              'title': _this2.refs.title.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }), !this.state.inputsValidation['title'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, 'Year: ', \" \"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"year\",\n          value: this.state.year,\n          ref: \"year\",\n          onChange: function onChange(e) {\n            _this2._validation('year');\n\n            _this2.setState({\n              'year': _this2.refs.year.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), !this.state.inputsValidation['year'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Oops! Input invalid!\"))), React.createElement(\"div\", {\n          className: \"modal-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": this.state.isValid ? \"modal\" : '',\n          onClick: function onClick() {\n            if (_this2.state.isValid) {\n              _this2.props.setOpenModalKey(-99);\n\n              _this2._add(_this2.props.index);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Add\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": \"modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"Close\"))))));\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._renderButtons();\n    }\n  }]);\n\n  return AddNewMovie;\n}(Component);\n\nexport default AddNewMovie;","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\moviesLibrary\\my-app\\src\\common\\AddNewMovie\\AddNewMovie.js"],"names":["React","Component","Functions","AddNewMovie","props","state","title","year","runtime","genre","director","inputsValidation","isValid","addFormData","id","_generateMovieId","titleCorrectFormat","_titleCorrectFormat","addMovie","Math","floor","random","_isIdExist","moviesList","general","i","length","movie","titleToArray","split","result","cleanStringFromJunk","cleanNumberAtMiddleOfWord","setUpperlowerCase","arrayToString","inputCheck","validationObj","val","isNaN","status","msg","InputValidation","refs","value","classList","add","setState","className","includes","remove","e","_validation","setOpenModalKey","_add","index","err","_renderButtons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import './App.css';\r\nimport * as Functions from '../functions/functions';\r\nimport '../../css/movies/movies.css';\r\n\r\nclass AddNewMovie extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"imdbID\": '',\r\n            title: '',\r\n            year: '',\r\n            runtime: '',\r\n            genre: '',\r\n            director: '',\r\n            inputsValidation: { 'year': true, 'title': true },\r\n            isValid: true,\r\n        }\r\n    }\r\n\r\n    _add() {\r\n        let addFormData = {\r\n            title: this.state.title,\r\n            year: this.state.year\r\n        }\r\n\r\n        let id = this._generateMovieId();\r\n        let titleCorrectFormat = this._titleCorrectFormat(this.state.title);\r\n\r\n        addFormData.title = titleCorrectFormat;\r\n\r\n        this.props.addMovie(addFormData, id);\r\n    }\r\n\r\n    _generateMovieId() {\r\n        let id = Math.floor((Math.random() * 1000) + 1);\r\n\r\n        while (this._isIdExist(id)) {\r\n            id = Math.floor((Math.random() * 1000) + 1);\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    _isIdExist(id) {\r\n        let moviesList = this.props.general.moviesList;\r\n\r\n        for (var i = 0; i < moviesList.length; ++i) {\r\n            let movie = moviesList[i];\r\n\r\n            if (movie.id == id) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _titleCorrectFormat(title) {\r\n        let titleToArray = title.split('');\r\n        let result = [];\r\n\r\n        result = Functions.cleanStringFromJunk(titleToArray);\r\n\r\n        result = Functions.cleanNumberAtMiddleOfWord(result);\r\n\r\n        result = Functions.setUpperlowerCase(result);\r\n\r\n        result = Functions.arrayToString(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    _validation(inputCheck) {\r\n        let validationObj = {\r\n            'year': (val) => {\r\n                if (isNaN(val) || val.length != 4 || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'title': (val) => {\r\n\r\n            }\r\n        }\r\n\r\n        let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\r\n        let { inputsValidation } = this.state;\r\n\r\n        if (InputValidation.status == 'error') {\r\n            this.refs[inputCheck].classList.add('invalid');\r\n            inputsValidation[inputCheck] = false;\r\n            this.setState({ isValid: false, inputsValidation });\r\n        }\r\n        else if (InputValidation.status == 'ok') {\r\n            if (this.refs[inputCheck].className.includes('invalid')) {\r\n                this.refs[inputCheck].classList.remove('invalid');\r\n                inputsValidation[inputCheck] = true;\r\n\r\n                this.setState({ isValid: true, inputsValidation })\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderButtons() {\r\n        try {\r\n            return (\r\n                <div className=\"container\">\r\n                    {/* Button to Open the Modal  */}\r\n                    <div className=\"btnContainer\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#add\" ><span>Add</span></button>\r\n                    </div >\r\n\r\n                    {/* The add Modal  */}\r\n                    <div className=\"modal\" id=\"add\">\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n\r\n                                {/* Modal Header */}\r\n                                <div className=\"modal-header\">\r\n                                    <h4 className=\"modal-title\">Add New Movie </h4>\r\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" >&times;</button>\r\n                                </div>\r\n\r\n                                {/* Modal body  */}\r\n                                <div className=\"modal-body\">\r\n                                    <div><span>{'Title: '} </span><input type=\"text\" name=\"title\" value={this.state.title} ref='title' onChange={(e) => { this.setState({ 'title': this.refs.title.value }); }}></input>{!this.state.inputsValidation['title'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                </div>\r\n\r\n                                {/* Modal footer  */}\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._add(this.props.index) } }}>Add</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" >Close</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        catch (err) { }\r\n    }\r\n\r\n    render() {\r\n        return this._renderButtons()\r\n    }\r\n}\r\n\r\nexport default (AddNewMovie);\r\n\r\n"]},"metadata":{},"sourceType":"module"}