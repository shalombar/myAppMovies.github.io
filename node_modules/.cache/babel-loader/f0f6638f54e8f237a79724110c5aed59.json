{"ast":null,"code":"// import React, { Component } from 'react';\n// // import './App.css';\n// class AddNewMovie extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             \"imdbID\": '',\n//             title: '',\n//             year: '',\n//             runtime: '',\n//             genre: '',\n//             director: '',\n//             inputsValidation: { 'year': true, 'runtime': true, 'genre': true, 'director': true },\n//             isValid: true,\n//         }\n//     }\n//     _add() {\n//         let addFormData = {\n//             title: this.state.title,\n//             year: this.state.year\n//         }\n//         let id = this._generateMovieId();\n//         this.props.addMovie(addFormData, id);\n//     }\n//     _generateMovieId() {\n//         let id = Math.floor((Math.random() * 1000) + 1);\n//         while (this._isIdExist(id)) {\n//             id = Math.floor((Math.random() * 1000) + 1);\n//         }\n//         return id;\n//     }\n//     _isIdExist(id) {\n//         let moviesList = this.props.general.moviesList;\n//         for (var i = 0; i < moviesList.length; ++i) {\n//             let movie = moviesList[i];\n//             if (movie.id == id) {\n//                 return true;\n//             }\n//         }\n//         return false;\n//     }\n//     _update(index) {\n//         let newDatas = this._setDataToUpdate();\n//         let newDataToMerge = {\n//             id: index + 1,\n//             year: this.state.year,\n//             runtime: this.state.runtime,\n//             genre: this.state.genre,\n//             director: this.state.director,\n//         }\n//         let newData = Object.assign(this.props.item, newDataToMerge);\n//         this.props.update(newDatas, newData, index + 1);\n//     }\n//     _validation(inputCheck) {\n//         let validationObj = {\n//             'year': (val) => {\n//                 if (isNaN(val) || val.length != 4 || val < 0) {\n//                     return {\n//                         status: 'error',\n//                         msg: 'year is not valid'\n//                     }\n//                 }\n//                 return { status: 'ok' }\n//             },\n//             'runtime': (val) => {\n//                 if (isNaN(val) || val < 0) {\n//                     return {\n//                         status: 'error',\n//                         msg: 'year is not valid'\n//                     }\n//                 }\n//                 return { status: 'ok' }\n//             },\n//             'genre': (val) => {\n//             },\n//             'director': (val) => {\n//                 let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\n//                 let director = val.split(',');\n//                 let filterDirector = [];\n//                 director.forEach((item, index) => {\n//                     if (item.charAt(0) == ' ') {\n//                         director[index] = item.substr(1);\n//                     }\n//                 });\n//                 filterDirector = director.filter((item, index) => {\n//                     return !letters.test(item)\n//                 })\n//                 if (filterDirector.length > 0) {\n//                     return {\n//                         status: 'error',\n//                         msg: 'input is not valid'\n//                     }\n//                 }\n//                 return { status: 'ok' }\n//             },\n//         }\n//         let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\n//         let { inputsValidation } = this.state;\n//         if (InputValidation.status == 'error') {\n//             this.refs[inputCheck].classList.add('invalid');\n//             inputsValidation[inputCheck] = false;\n//             this.setState({ isValid: false, inputsValidation });\n//         }\n//         else if (InputValidation.status == 'ok') {\n//             if (this.refs[inputCheck].className.includes('invalid')) {\n//                 this.refs[inputCheck].classList.remove('invalid');\n//                 inputsValidation[inputCheck] = true;\n//                 this.setState({ isValid: true, inputsValidation })\n//             }\n//         }\n//     }\n//     _getRuntime() {\n//         let runtime = this.state.runtime.split(' ');\n//         return runtime[0];\n//     }\n//     _renderButtons() {\n//         try {\n//             return (\n//                 <div className=\"container\">\n//                     {/* Button to Open the Modal  */}\n//                     <div className=\"btnContainer\">\n//                         <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#add\" ><span>Add</span></button>\n//                     </div >\n//                     {/* The add Modal  */}\n//                     <div className=\"modal\" id=\"add\">\n//                         <div className=\"modal-dialog\">\n//                             <div className=\"modal-content\">\n//                                 {/* Modal Header */}\n//                                 <div className=\"modal-header\">\n//                                     <h4 className=\"modal-title\">Add New Movie </h4>\n//                                     <button type=\"button\" className=\"close\" data-dismiss=\"modal\" >&times;</button>\n//                                 </div>\n//                                 {/* Modal body  */}\n//                                 <div className=\"modal-body\">\n//                                     <div><span>{'Title: '} </span><input type=\"text\" name=\"title\" value={this.state.title} ref='title' onChange={(e) => { this.setState({ 'title': this.refs.title.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\n//                                     <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\n//                                 </div>\n//                                 {/* Modal footer  */}\n//                                 <div className=\"modal-footer\">\n//                                     <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._add(this.props.index) } }}>Add</button>\n//                                     <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" >Close</button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             );\n//         }\n//         catch (err) { }\n//     }\n//     render() {\n//         return this._renderButtons()\n//     }\n// }\n// export default (AddNewMovie);","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\moviesLibrary\\my-app\\src\\common\\AddNewMovie\\AddNewMovie.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// // import './App.css';\r\n\r\n// class AddNewMovie extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             \"imdbID\": '',\r\n//             title: '',\r\n//             year: '',\r\n//             runtime: '',\r\n//             genre: '',\r\n//             director: '',\r\n//             inputsValidation: { 'year': true, 'runtime': true, 'genre': true, 'director': true },\r\n//             isValid: true,\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n//     _add() {\r\n//         let addFormData = {\r\n//             title: this.state.title,\r\n//             year: this.state.year\r\n//         }\r\n\r\n//         let id = this._generateMovieId();\r\n\r\n//         this.props.addMovie(addFormData, id);\r\n//     }\r\n\r\n//     _generateMovieId() {\r\n//         let id = Math.floor((Math.random() * 1000) + 1);\r\n\r\n//         while (this._isIdExist(id)) {\r\n//             id = Math.floor((Math.random() * 1000) + 1);\r\n//         }\r\n\r\n//         return id;\r\n//     }\r\n\r\n//     _isIdExist(id) {\r\n//         let moviesList = this.props.general.moviesList;\r\n\r\n//         for (var i = 0; i < moviesList.length; ++i) {\r\n//             let movie = moviesList[i];\r\n\r\n//             if (movie.id == id) {\r\n//                 return true;\r\n//             }\r\n//         }\r\n\r\n//         return false;\r\n//     }\r\n\r\n//     _update(index) {\r\n//         let newDatas = this._setDataToUpdate();\r\n//         let newDataToMerge = {\r\n//             id: index + 1,\r\n//             year: this.state.year,\r\n//             runtime: this.state.runtime,\r\n//             genre: this.state.genre,\r\n//             director: this.state.director,\r\n//         }\r\n//         let newData = Object.assign(this.props.item, newDataToMerge);\r\n\r\n\r\n\r\n//         this.props.update(newDatas, newData, index + 1);\r\n//     }\r\n\r\n//     _validation(inputCheck) {\r\n//         let validationObj = {\r\n//             'year': (val) => {\r\n//                 if (isNaN(val) || val.length != 4 || val < 0) {\r\n//                     return {\r\n//                         status: 'error',\r\n//                         msg: 'year is not valid'\r\n//                     }\r\n//                 }\r\n//                 return { status: 'ok' }\r\n//             },\r\n//             'runtime': (val) => {\r\n//                 if (isNaN(val) || val < 0) {\r\n//                     return {\r\n//                         status: 'error',\r\n//                         msg: 'year is not valid'\r\n//                     }\r\n//                 }\r\n//                 return { status: 'ok' }\r\n//             },\r\n//             'genre': (val) => {\r\n\r\n//             },\r\n//             'director': (val) => {\r\n//                 let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\r\n//                 let director = val.split(',');\r\n//                 let filterDirector = [];\r\n\r\n//                 director.forEach((item, index) => {\r\n//                     if (item.charAt(0) == ' ') {\r\n//                         director[index] = item.substr(1);\r\n//                     }\r\n//                 });\r\n\r\n//                 filterDirector = director.filter((item, index) => {\r\n//                     return !letters.test(item)\r\n//                 })\r\n\r\n//                 if (filterDirector.length > 0) {\r\n//                     return {\r\n//                         status: 'error',\r\n//                         msg: 'input is not valid'\r\n//                     }\r\n//                 }\r\n//                 return { status: 'ok' }\r\n//             },\r\n//         }\r\n\r\n//         let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\r\n//         let { inputsValidation } = this.state;\r\n\r\n//         if (InputValidation.status == 'error') {\r\n//             this.refs[inputCheck].classList.add('invalid');\r\n//             inputsValidation[inputCheck] = false;\r\n//             this.setState({ isValid: false, inputsValidation });\r\n//         }\r\n//         else if (InputValidation.status == 'ok') {\r\n//             if (this.refs[inputCheck].className.includes('invalid')) {\r\n//                 this.refs[inputCheck].classList.remove('invalid');\r\n//                 inputsValidation[inputCheck] = true;\r\n\r\n//                 this.setState({ isValid: true, inputsValidation })\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     _getRuntime() {\r\n//         let runtime = this.state.runtime.split(' ');\r\n\r\n//         return runtime[0];\r\n//     }\r\n\r\n//     _renderButtons() {\r\n//         try {\r\n//             return (\r\n//                 <div className=\"container\">\r\n//                     {/* Button to Open the Modal  */}\r\n//                     <div className=\"btnContainer\">\r\n//                         <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#add\" ><span>Add</span></button>\r\n//                     </div >\r\n\r\n//                     {/* The add Modal  */}\r\n//                     <div className=\"modal\" id=\"add\">\r\n//                         <div className=\"modal-dialog\">\r\n//                             <div className=\"modal-content\">\r\n\r\n//                                 {/* Modal Header */}\r\n//                                 <div className=\"modal-header\">\r\n//                                     <h4 className=\"modal-title\">Add New Movie </h4>\r\n//                                     <button type=\"button\" className=\"close\" data-dismiss=\"modal\" >&times;</button>\r\n//                                 </div>\r\n\r\n//                                 {/* Modal body  */}\r\n//                                 <div className=\"modal-body\">\r\n//                                     <div><span>{'Title: '} </span><input type=\"text\" name=\"title\" value={this.state.title} ref='title' onChange={(e) => { this.setState({ 'title': this.refs.title.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n//                                     <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n//                                 </div>\r\n\r\n//                                 {/* Modal footer  */}\r\n//                                 <div className=\"modal-footer\">\r\n//                                     <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._add(this.props.index) } }}>Add</button>\r\n//                                     <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" >Close</button>\r\n//                                 </div>\r\n\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             );\r\n//         }\r\n//         catch (err) { }\r\n//     }\r\n\r\n//     render() {\r\n//         return this._renderButtons()\r\n//     }\r\n// }\r\n\r\n// export default (AddNewMovie);\r\n\r\n"]},"metadata":{},"sourceType":"module"}