{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\src\\\\common\\\\AddNewMovie\\\\AddNewMovie.js\";\nimport React, { Component } from 'react'; // import './App.css';\n\nvar AddNewMovie =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNewMovie, _Component);\n\n  function AddNewMovie(props) {\n    var _this;\n\n    _classCallCheck(this, AddNewMovie);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNewMovie).call(this, props));\n    _this.state = {\n      \"imdbID\": '',\n      year: '',\n      runtime: '',\n      genre: '',\n      director: '',\n      inputsValidation: {\n        'year': true,\n        'runtime': true,\n        'genre': true,\n        'director': true\n      },\n      isValid: true\n    };\n    return _this;\n  }\n\n  _createClass(AddNewMovie, [{\n    key: \"_add\",\n    value: function _add() {}\n  }, {\n    key: \"_update\",\n    value: function _update(index) {\n      var newDatas = this._setDataToUpdate();\n\n      var newDataToMerge = {\n        id: index + 1,\n        year: this.state.year,\n        runtime: this.state.runtime,\n        genre: this.state.genre,\n        director: this.state.director\n      };\n      var newData = Object.assign(this.props.item, newDataToMerge);\n      this.props.update(newDatas, newData, index + 1);\n    }\n  }, {\n    key: \"_validation\",\n    value: function _validation(inputCheck) {\n      var validationObj = {\n        'year': function year(val) {\n          if (isNaN(val) || val.length != 4 || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'runtime': function runtime(val) {\n          if (isNaN(val) || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'genre': function genre(val) {},\n        'director': function director(val) {\n          var letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\n          var director = val.split(',');\n          var filterDirector = [];\n          director.forEach(function (item, index) {\n            if (item.charAt(0) == ' ') {\n              director[index] = item.substr(1);\n            }\n          });\n          filterDirector = director.filter(function (item, index) {\n            return !letters.test(item);\n          });\n\n          if (filterDirector.length > 0) {\n            return {\n              status: 'error',\n              msg: 'input is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        }\n      };\n      var InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\n      var inputsValidation = this.state.inputsValidation;\n\n      if (InputValidation.status == 'error') {\n        this.refs[inputCheck].classList.add('invalid');\n        inputsValidation[inputCheck] = false;\n        this.setState({\n          isValid: false,\n          inputsValidation: inputsValidation\n        });\n      } else if (InputValidation.status == 'ok') {\n        if (this.refs[inputCheck].className.includes('invalid')) {\n          this.refs[inputCheck].classList.remove('invalid');\n          inputsValidation[inputCheck] = true;\n          this.setState({\n            isValid: true,\n            inputsValidation: inputsValidation\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_getRuntime\",\n    value: function _getRuntime() {\n      var runtime = this.state.runtime.split(' ');\n      return runtime[0];\n    }\n  }, {\n    key: \"_renderButtons\",\n    value: function _renderButtons() {\n      var _this2 = this;\n\n      try {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"btnContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          \"data-toggle\": \"modal\",\n          \"data-target\": \"#add\",\n          onClick: function onClick() {\n            if (_this2.state.isValid) {\n              _this2.props.setOpenModalKey(-99);\n\n              _this2._add(_this2.props.index);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Add\"))), React.createElement(\"div\", {\n          className: \"modal\",\n          id: \"add\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-dialog\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"modal-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Add New Movie \"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"\\xD7\")), React.createElement(\"div\", {\n          className: \"modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, 'Year: ', \" \"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"year\",\n          value: this.state.year,\n          ref: \"year\",\n          onChange: function onChange(e) {\n            _this2._validation('year');\n\n            _this2.setState({\n              'year': _this2.refs.year.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }), !this.state.inputsValidation['year'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, 'Runtime (Minutes): '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"runtime\",\n          value: this._getRuntime(),\n          ref: \"runtime\",\n          onChange: function onChange(e) {\n            return _this2.setState({\n              'runtime': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), !this.state.inputsValidation['runtime'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, 'Genre: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"genre\",\n          value: this.state.genre,\n          ref: \"genre\",\n          onChange: function onChange(e) {\n            return _this2.setState({\n              'genre': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }), !this.state.inputsValidation['genre'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, 'Director: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"director\",\n          value: this.state.director,\n          ref: \"director\",\n          onChange: function onChange(e) {\n            _this2._validation('director');\n\n            _this2.setState({\n              'director': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }), !this.state.inputsValidation['director'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"Oops! Input invalid!\"))), React.createElement(\"div\", {\n          className: \"modal-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": this.state.isValid ? \"modal\" : '',\n          onClick: function onClick() {\n            if (_this2.state.isValid) {\n              _this2.props.setOpenModalKey(-99);\n\n              _this2._update(_this2.props.index);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"Add\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": \"modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, \"Close\"))))));\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._renderButtons();\n    }\n  }]);\n\n  return AddNewMovie;\n}(Component);\n\nexport default AddNewMovie;","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\moviesLibrary\\my-app\\src\\common\\AddNewMovie\\AddNewMovie.js"],"names":["React","Component","AddNewMovie","props","state","year","runtime","genre","director","inputsValidation","isValid","index","newDatas","_setDataToUpdate","newDataToMerge","id","newData","Object","assign","item","update","inputCheck","validationObj","val","isNaN","length","status","msg","letters","split","filterDirector","forEach","charAt","substr","filter","test","InputValidation","refs","value","classList","add","setState","className","includes","remove","setOpenModalKey","_add","e","_validation","_getRuntime","target","_update","err","_renderButtons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import './App.css';\r\n\r\nclass AddNewMovie extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"imdbID\": '',\r\n            year: '',\r\n            runtime: '',\r\n            genre: '',\r\n            director: '',\r\n            inputsValidation: { 'year': true, 'runtime': true, 'genre': true, 'director': true },\r\n            isValid: true,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    _add() {\r\n\r\n    }\r\n\r\n    _update(index) {\r\n        let newDatas = this._setDataToUpdate();\r\n        let newDataToMerge = {\r\n            id: index + 1,\r\n            year: this.state.year,\r\n            runtime: this.state.runtime,\r\n            genre: this.state.genre,\r\n            director: this.state.director,\r\n        }\r\n        let newData = Object.assign(this.props.item, newDataToMerge);\r\n\r\n\r\n\r\n        this.props.update(newDatas, newData, index + 1);\r\n    }\r\n\r\n    _validation(inputCheck) {\r\n        let validationObj = {\r\n            'year': (val) => {\r\n                if (isNaN(val) || val.length != 4 || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'runtime': (val) => {\r\n                if (isNaN(val) || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'genre': (val) => {\r\n\r\n            },\r\n            'director': (val) => {\r\n                let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\r\n                let director = val.split(',');\r\n                let filterDirector = [];\r\n\r\n                director.forEach((item, index) => {\r\n                    if (item.charAt(0) == ' ') {\r\n                        director[index] = item.substr(1);\r\n                    }\r\n                });\r\n\r\n                filterDirector = director.filter((item, index) => {\r\n                    return !letters.test(item)\r\n                })\r\n\r\n                if (filterDirector.length > 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'input is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n        }\r\n\r\n        let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\r\n        let { inputsValidation } = this.state;\r\n\r\n        if (InputValidation.status == 'error') {\r\n            this.refs[inputCheck].classList.add('invalid');\r\n            inputsValidation[inputCheck] = false;\r\n            this.setState({ isValid: false, inputsValidation });\r\n        }\r\n        else if (InputValidation.status == 'ok') {\r\n            if (this.refs[inputCheck].className.includes('invalid')) {\r\n                this.refs[inputCheck].classList.remove('invalid');\r\n                inputsValidation[inputCheck] = true;\r\n\r\n                this.setState({ isValid: true, inputsValidation })\r\n            }\r\n        }\r\n    }\r\n\r\n    _getRuntime() {\r\n        let runtime = this.state.runtime.split(' ');\r\n\r\n        return runtime[0];\r\n    }\r\n\r\n    _renderButtons() {\r\n        try {\r\n            return (\r\n                <div className=\"container\">\r\n                    {/* Button to Open the Modal  */}\r\n                    <div className=\"btnContainer\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#add\" onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._add(this.props.index) } }}><span>Add</span></button>\r\n                    </div >\r\n\r\n                    {/* The add Modal  */}\r\n                    <div className=\"modal\" id=\"add\">\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n\r\n                                {/* Modal Header */}\r\n                                <div className=\"modal-header\">\r\n                                    <h4 className=\"modal-title\">Add New Movie </h4>\r\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" >&times;</button>\r\n                                </div>\r\n\r\n                                {/* Modal body  */}\r\n                                <div className=\"modal-body\">\r\n                                    <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Runtime (Minutes): '}</span><input type=\"text\" name=\"runtime\" value={this._getRuntime()} ref='runtime' onChange={(e) => this.setState({ 'runtime': e.target.value })}></input>{!this.state.inputsValidation['runtime'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Genre: '}</span><input type=\"text\" name=\"genre\" value={this.state.genre} ref='genre' onChange={(e) => this.setState({ 'genre': e.target.value })}></input>{!this.state.inputsValidation['genre'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Director: '}</span><input type=\"text\" name=\"director\" value={this.state.director} ref='director' onChange={(e) => { this._validation('director'); this.setState({ 'director': e.target.value }) }}></input>{!this.state.inputsValidation['director'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                </div>\r\n\r\n                                {/* Modal footer  */}\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._update(this.props.index) } }}>Add</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" >Close</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        catch (err) { }\r\n    }\r\n\r\n    render() {\r\n        return this._renderButtons()\r\n    }\r\n}\r\n\r\nexport default (AddNewMovie);\r\n\r\n"]},"metadata":{},"sourceType":"module"}