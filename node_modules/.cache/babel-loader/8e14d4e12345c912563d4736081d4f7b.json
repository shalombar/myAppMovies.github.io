{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\src\\\\common\\\\Movies\\\\movie\\\\MovieDetails\\\\Buttons.js\";\nimport React, { Component } from 'react';\nimport '../../../../css/movies/movies.css';\n\nvar Buttons =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Buttons, _Component);\n\n  function Buttons(props) {\n    var _this;\n\n    _classCallCheck(this, Buttons);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Buttons).call(this, props));\n    _this.state = {\n      \"imdbID\": '',\n      year: '',\n      runtime: '',\n      genre: '',\n      director: '',\n      inputsValidation: {\n        'year': true,\n        'runtime': true,\n        'genre': true,\n        'director': true\n      },\n      isValid: true\n    };\n    return _this;\n  }\n\n  _createClass(Buttons, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        \"imdbID\": this.props.item.imdbID,\n        year: this.props.item.Year,\n        runtime: this.props.item.Runtime,\n        genre: this.props.item.Genre,\n        director: this.props.item.Director\n      });\n    }\n  }, {\n    key: \"_setOpenModalKey\",\n    value: function _setOpenModalKey(key) {\n      this.props.setOpenModalKey(key);\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(id) {\n      var newDatas = this._setDataToUpdate();\n\n      var newDataToMerge = {\n        id: id,\n        year: this.state.year,\n        runtime: this.state.runtime,\n        genre: this.state.genre,\n        director: this.state.director\n      };\n      var newData = Object.assign(this.props.item, newDataToMerge);\n      console.log('xvv', this.state.runtime);\n      this.props.update(newDatas, newData, id);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      var newDatas = this._setDataAfterDelete();\n\n      this.props.deleteMovie(newDatas, id);\n    }\n  }, {\n    key: \"_setDataToUpdate\",\n    value: function _setDataToUpdate() {\n      var currentData = this.props.general.moviesList;\n\n      for (var i = 0; i < currentData.length; ++i) {\n        var movie = currentData[i];\n\n        if (movie.imdbID === this.state.imdbID) {\n          movie.Year = this.state.year;\n          movie.Runtime = this.state.runtime;\n          movie.Genre = this.state.genre;\n          movie.Director = this.state.director;\n        }\n      }\n\n      return currentData;\n    }\n  }, {\n    key: \"_setDataAfterDelete\",\n    value: function _setDataAfterDelete() {\n      var _this2 = this;\n\n      var currentData = this.props.general.moviesList;\n      return currentData.filter(function (item, index) {\n        return item.imdbID != _this2.state.imdbID;\n      });\n    }\n  }, {\n    key: \"_validation\",\n    value: function _validation(inputCheck) {\n      var validationObj = {\n        'year': function year(val) {\n          if (isNaN(val) || val.length != 4 || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'runtime': function runtime(val) {\n          if (isNaN(val) || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'genre': function genre(val) {\n          console.log('fasf', val);\n          var letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\n          var genre = val.split(',');\n          var filterGenre = ['romance', 'action', 'adventure', 'honor', 'western', 'documentary', 'crime', 'science fiction', 'war', 'mystery', 'comedy', 'biographical', 'parody', 'melodrama', 'family', 'drama'];\n          var result = false;\n          genre.forEach(function (item, index) {\n            if (item.charAt(0) == ' ') {\n              genre[index] = item.substr(1);\n            }\n          });\n\n          for (var i = 0; i < genre.length; ++i) {\n            result = false;\n\n            for (var j = 0; j < filterGenre.length; ++j) {\n              if (genre[i].toUpperCase() === filterGenre[j].toUpperCase()) {\n                result = true;\n                j = filterGenre.length;\n              }\n            }\n\n            if (!result) {\n              return {\n                status: 'error',\n                msg: 'input is not valid'\n              };\n            }\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'director': function director(val) {\n          var letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\n          var director = val.split(',');\n          var filterDirector = [];\n          director.forEach(function (item, index) {\n            if (item.charAt(0) == ' ') {\n              director[index] = item.substr(1);\n            }\n          });\n          filterDirector = director.filter(function (item, index) {\n            return !letters.test(item);\n          });\n\n          if (filterDirector.length > 0) {\n            return {\n              status: 'error',\n              msg: 'input is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        }\n      };\n      var InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\n      var inputsValidation = this.state.inputsValidation;\n\n      if (InputValidation.status == 'error') {\n        this.refs[inputCheck].classList.add('invalid');\n        inputsValidation[inputCheck] = false;\n        this.setState({\n          isValid: false,\n          inputsValidation: inputsValidation\n        });\n      } else if (InputValidation.status == 'ok') {\n        if (this.refs[inputCheck].className.includes('invalid')) {\n          this.refs[inputCheck].classList.remove('invalid');\n          inputsValidation[inputCheck] = true;\n          this.setState({\n            isValid: true,\n            inputsValidation: inputsValidation\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_getRuntime\",\n    value: function _getRuntime() {\n      var runtime = this.state.runtime.split(' ');\n      return runtime[0];\n    }\n  }, {\n    key: \"_getGenreOrDirector\",\n    value: function _getGenreOrDirector(inputType) {\n      var _this3 = this;\n\n      var input = this.state[inputType].split(',');\n      console.log('vvvv', input);\n      input.forEach(function (itemm, index) {\n        if (itemm.charAt(0) == ' ') {\n          input[index] = itemm.substr(1);\n        }\n\n        input[index] = _this3._capitalizeFirstLetter(item);\n      });\n      console.log('vvvv2222', input);\n      return input.toString(); // return this.state[inputType]\n    }\n  }, {\n    key: \"_capitalizeFirstLetter\",\n    value: function _capitalizeFirstLetter(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"_renderButtons\",\n    value: function _renderButtons() {\n      var _this4 = this;\n\n      try {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"btnContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          \"data-toggle\": \"modal\",\n          \"data-target\": \"#update\",\n          onClick: function onClick() {\n            return _this4._setOpenModalKey(_this4.props.index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"update\")), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: function onClick() {\n            if (_this4.state.isValid) {\n              _this4.props.setOpenModalKey(-99);\n\n              _this4._delete(_this4.props.item.id);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"Delete\"))), React.createElement(\"div\", {\n          className: \"modal\",\n          id: \"update\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-dialog\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"modal-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, \"Update Movie Details\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          onClick: function onClick() {\n            return _this4.props.setOpenModalKey(-99);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, \"\\xD7\")), React.createElement(\"div\", {\n          className: \"modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, 'Year: ', \" \"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"year\",\n          value: this.state.year,\n          ref: \"year\",\n          onChange: function onChange(e) {\n            _this4._validation('year');\n\n            _this4.setState({\n              'year': _this4.refs.year.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }), !this.state.inputsValidation['year'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, 'Runtime (Minutes): '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"runtime\",\n          value: this._getRuntime(),\n          ref: \"runtime\",\n          onChange: function onChange(e) {\n            _this4._validation('runtime');\n\n            _this4.setState({\n              'runtime': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }), !this.state.inputsValidation['runtime'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, 'Genre: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"genre\",\n          value: this._getGenreOrDirector('genre'),\n          ref: \"genre\",\n          onChange: function onChange(e) {\n            _this4._validation('genre');\n\n            _this4.setState({\n              'genre': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }), !this.state.inputsValidation['genre'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, 'Director: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"director\",\n          value: this._getGenreOrDirector('director'),\n          ref: \"director\",\n          onChange: function onChange(e) {\n            _this4._validation('director');\n\n            _this4.setState({\n              'director': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }), !this.state.inputsValidation['director'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, \"Oops! Input invalid!\"))), React.createElement(\"div\", {\n          className: \"modal-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": this.state.isValid ? \"modal\" : '',\n          onClick: function onClick() {\n            if (_this4.state.isValid) {\n              _this4.props.setOpenModalKey(-99);\n\n              _this4._update(_this4.props.item.id);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, \"Update\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": \"modal\",\n          onClick: function onClick() {\n            return _this4.props.setOpenModalKey(-99);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, \"Close\"))))));\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._renderButtons();\n    }\n  }]);\n\n  return Buttons;\n}(Component);\n\nexport default Buttons;","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\moviesLibrary\\my-app\\src\\common\\Movies\\movie\\MovieDetails\\Buttons.js"],"names":["React","Component","Buttons","props","state","year","runtime","genre","director","inputsValidation","isValid","setState","item","imdbID","Year","Runtime","Genre","Director","key","setOpenModalKey","id","newDatas","_setDataToUpdate","newDataToMerge","newData","Object","assign","console","log","update","_setDataAfterDelete","deleteMovie","currentData","general","moviesList","i","length","movie","filter","index","inputCheck","validationObj","val","isNaN","status","msg","letters","split","filterGenre","result","forEach","charAt","substr","j","toUpperCase","filterDirector","test","InputValidation","refs","value","classList","add","className","includes","remove","inputType","input","itemm","_capitalizeFirstLetter","toString","str","slice","_setOpenModalKey","_delete","e","_validation","_getRuntime","target","_getGenreOrDirector","_update","err","_renderButtons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../../../css/movies/movies.css';\r\n\r\nclass Buttons extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"imdbID\": '',\r\n            year: '',\r\n            runtime: '',\r\n            genre: '',\r\n            director: '',\r\n            inputsValidation: { 'year': true, 'runtime': true, 'genre': true, 'director': true },\r\n            isValid: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            \"imdbID\": this.props.item.imdbID,\r\n            year: this.props.item.Year,\r\n            runtime: this.props.item.Runtime,\r\n            genre: this.props.item.Genre,\r\n            director: this.props.item.Director,\r\n        })\r\n    }\r\n\r\n    _setOpenModalKey(key) {\r\n        this.props.setOpenModalKey(key)\r\n    }\r\n\r\n    _update(id) {\r\n        let newDatas = this._setDataToUpdate();\r\n        let newDataToMerge = {\r\n            id: id,\r\n            year: this.state.year,\r\n            runtime: this.state.runtime,\r\n            genre: this.state.genre,\r\n            director: this.state.director,\r\n        }\r\n        let newData = Object.assign(this.props.item, newDataToMerge);\r\n\r\n        console.log('xvv', this.state.runtime)\r\n\r\n        this.props.update(newDatas, newData, id);\r\n    }\r\n\r\n    _delete(id) {\r\n        let newDatas = this._setDataAfterDelete();\r\n        this.props.deleteMovie(newDatas, id);\r\n    }\r\n\r\n    _setDataToUpdate() {\r\n        let currentData = this.props.general.moviesList;\r\n\r\n        for (var i = 0; i < currentData.length; ++i) {\r\n            let movie = currentData[i];\r\n\r\n            if (movie.imdbID === this.state.imdbID) {\r\n                movie.Year = this.state.year;\r\n                movie.Runtime = this.state.runtime;\r\n                movie.Genre = this.state.genre;\r\n                movie.Director = this.state.director;\r\n            }\r\n        }\r\n\r\n        return currentData;\r\n    }\r\n\r\n    _setDataAfterDelete() {\r\n        let currentData = this.props.general.moviesList;\r\n        return currentData.filter((item, index) => {\r\n            return item.imdbID != this.state.imdbID\r\n        })\r\n    }\r\n\r\n    _validation(inputCheck) {\r\n        let validationObj = {\r\n            'year': (val) => {\r\n                if (isNaN(val) || val.length != 4 || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'runtime': (val) => {\r\n                if (isNaN(val) || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'genre': (val) => {\r\n                console.log('fasf', val)\r\n                let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\r\n                let genre = val.split(',');\r\n                let filterGenre = ['romance', 'action', 'adventure', 'honor', 'western', 'documentary', 'crime', 'science fiction', 'war', 'mystery', 'comedy', 'biographical', 'parody', 'melodrama', 'family', 'drama'];\r\n                let result = false;\r\n\r\n                genre.forEach((item, index) => {\r\n                    if (item.charAt(0) == ' ') {\r\n                        genre[index] = item.substr(1);\r\n                    }\r\n                });\r\n\r\n                for (var i = 0; i < genre.length; ++i) {\r\n                    result = false;\r\n                    for (var j = 0; j < filterGenre.length; ++j) {\r\n                        if (genre[i].toUpperCase() === filterGenre[j].toUpperCase()) {\r\n                            result = true;\r\n                            j = filterGenre.length;\r\n                        }\r\n                    }\r\n                    if (!result) {\r\n                        return {\r\n                            status: 'error',\r\n                            msg: 'input is not valid'\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return { status: 'ok' }\r\n            },\r\n            'director': (val) => {\r\n                let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\r\n                let director = val.split(',');\r\n                let filterDirector = [];\r\n\r\n                director.forEach((item, index) => {\r\n                    if (item.charAt(0) == ' ') {\r\n                        director[index] = item.substr(1);\r\n                    }\r\n                });\r\n\r\n                filterDirector = director.filter((item, index) => {\r\n                    return !letters.test(item)\r\n                })\r\n\r\n                if (filterDirector.length > 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'input is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n        }\r\n\r\n        let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\r\n        let { inputsValidation } = this.state;\r\n\r\n        if (InputValidation.status == 'error') {\r\n            this.refs[inputCheck].classList.add('invalid');\r\n            inputsValidation[inputCheck] = false;\r\n            this.setState({ isValid: false, inputsValidation });\r\n        }\r\n        else if (InputValidation.status == 'ok') {\r\n            if (this.refs[inputCheck].className.includes('invalid')) {\r\n                this.refs[inputCheck].classList.remove('invalid');\r\n                inputsValidation[inputCheck] = true;\r\n\r\n                this.setState({ isValid: true, inputsValidation })\r\n            }\r\n        }\r\n    }\r\n\r\n    _getRuntime() {\r\n        let runtime = this.state.runtime.split(' ');\r\n\r\n        return runtime[0];\r\n    }\r\n\r\n    _getGenreOrDirector(inputType) {\r\n        let input = this.state[inputType].split(',');\r\n        console.log('vvvv', input)\r\n\r\n        input.forEach((itemm, index) => {\r\n            if (itemm.charAt(0) == ' ') {\r\n                input[index] = itemm.substr(1);\r\n            }\r\n            input[index] = this._capitalizeFirstLetter(item)\r\n        });\r\n        console.log('vvvv2222', input)\r\n\r\n\r\n        return input.toString();\r\n        // return this.state[inputType]\r\n    }\r\n\r\n    _capitalizeFirstLetter(str) {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    _renderButtons() {\r\n        try {\r\n            return (\r\n                <div className=\"container\">\r\n                    {/* Button to Open the Modal  */}\r\n                    <div className=\"btnContainer\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#update\" onClick={() => this._setOpenModalKey(this.props.index)}>\r\n                            <span>update</span>\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._delete(this.props.item.id) } }}><span>Delete</span></button>\r\n                    </div >\r\n\r\n                    {/* The update Modal  */}\r\n                    <div className=\"modal\" id=\"update\">\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n\r\n                                {/* Modal Header */}\r\n                                <div className=\"modal-header\">\r\n                                    <h4 className=\"modal-title\">Update Movie Details</h4>\r\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={() => this.props.setOpenModalKey(-99)}>&times;</button>\r\n                                </div>\r\n\r\n                                {/* Modal body  */}\r\n                                <div className=\"modal-body\">\r\n                                    <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Runtime (Minutes): '}</span><input type=\"text\" name=\"runtime\" value={this._getRuntime()} ref='runtime' onChange={(e) => { this._validation('runtime'); this.setState({ 'runtime': e.target.value }) }}></input>{!this.state.inputsValidation['runtime'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Genre: '}</span><input type=\"text\" name=\"genre\" value={this._getGenreOrDirector('genre')} ref='genre' onChange={(e) => { this._validation('genre'); this.setState({ 'genre': e.target.value }) }}></input>{!this.state.inputsValidation['genre'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Director: '}</span><input type=\"text\" name=\"director\" value={this._getGenreOrDirector('director')} ref='director' onChange={(e) => { this._validation('director'); this.setState({ 'director': e.target.value }) }}></input>{!this.state.inputsValidation['director'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                </div>\r\n\r\n                                {/* Modal footer  */}\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._update(this.props.item.id) } }}>Update</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={() => this.props.setOpenModalKey(-99)}>Close</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        catch (err) { }\r\n    }\r\n\r\n    render() {\r\n        return this._renderButtons()\r\n    }\r\n}\r\n\r\nexport default (Buttons);\r\n\r\n"]},"metadata":{},"sourceType":"module"}