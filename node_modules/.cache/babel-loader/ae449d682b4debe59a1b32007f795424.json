{"ast":null,"code":"import * as actions from '../actions/general.act';\nimport * as Functions from '../common/functions/functions';\n\nvar axios = require('axios');\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type == 'API') {\n        var i;\n\n        (function () {\n          var SERVER_ENDPOINT = \"http://localhost:3000/moviesList\";\n          var OMDb_API = 'http://www.omdbapi.com/?apikey=81d51a00';\n          var _action$payload = action.payload,\n              type = _action$payload.type,\n              method = _action$payload.method,\n              index = _action$payload.index,\n              newData = _action$payload.newData,\n              newDatas = _action$payload.newDatas,\n              id = _action$payload.id,\n              currentDb = _action$payload.currentDb;\n          var api = {\n            'get': function get() {\n              axios.get(SERVER_ENDPOINT).then(function (res) {\n                store.dispatch(actions.api(type, res.data));\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            },\n            'post': function post(newMovie) {\n              axios.post(SERVER_ENDPOINT, newMovie).then(function (res) {\n                store.dispatch(actions.api(type, newMovie));\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            },\n            'put': function put() {\n              axios.put(SERVER_ENDPOINT + '/' + index + '/', newData).then(function (res) {\n                store.dispatch(actions.api(type, newDatas));\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            },\n            'delete': function _delete() {\n              axios.delete(SERVER_ENDPOINT + '/' + index + '/').then(function (res) {\n                store.dispatch(actions.api(type, newDatas));\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            }\n          };\n\n          if (action.payload.first) {\n            (function () {\n              var _generateMovieId = function _generateMovieId(datas) {\n                var id = Math.floor(Math.random() * 1000 + 1);\n\n                while (_isIdExist(datas, id)) {\n                  id = Math.floor(Math.random() * 1000 + 1);\n                }\n\n                return id;\n              };\n\n              var _isIdExist = function _isIdExist(datas, id) {\n                var moviesList = this.props.general.moviesList;\n\n                for (var i = 0; i < datas.length; ++i) {\n                  var movie = datas[i];\n\n                  if (movie.id == id) {\n                    return true;\n                  }\n                }\n\n                return false;\n              };\n\n              var movies = action.payload.moviesList;\n              var data = [];\n\n              for (i = 0; i < movies; ++i) {\n                axios.get(OMDb_API + '&t=' + movies[i].Title + '&y=' + movies[i].Year).then(function (response) {\n                  var id = _generateMovieId(data);\n\n                  var movie = response.data;\n                  movie['id'] = id;\n                  data.push(movie);\n                  api['post']('ADD', movie);\n                });\n              }\n            })();\n          }\n\n          if (type == 'ADD') {\n            var title = newData.title.replace(' ', '+');\n            axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then(function (respone) {\n              var newMovie = respone.data;\n              newMovie['id'] = id;\n\n              if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\n                api[method](newMovie);\n                store.dispatch(actions.isMovieExist(false));\n              } else {\n                store.dispatch(actions.isMovieExist(true));\n              }\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          } else {\n            api[method]();\n          }\n        })();\n      }\n\n      return next(action);\n    };\n  };\n});","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\my-new-app\\src\\middleware\\general.mid.js"],"names":["actions","Functions","axios","require","store","next","action","type","i","SERVER_ENDPOINT","OMDb_API","payload","method","index","newData","newDatas","id","currentDb","api","get","then","res","dispatch","data","catch","err","console","log","newMovie","post","put","delete","first","_generateMovieId","datas","Math","floor","random","_isIdExist","moviesList","props","general","length","movie","movies","Title","Year","response","push","title","replace","year","respone","isMovieExist","imdbID"],"mappings":"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","sourcesContent":["import * as actions from '../actions/general.act';\r\nimport * as Functions from '../common/functions/functions';\r\n\r\nconst axios = require('axios');\r\n\r\nexport default store => next => action => {\r\n    if (action.type == 'API') {\r\n        const SERVER_ENDPOINT = \"http://localhost:3000/moviesList\";\r\n        const OMDb_API = 'http://www.omdbapi.com/?apikey=81d51a00';\r\n\r\n        let { type, method, index, newData, newDatas, id, currentDb } = action.payload;\r\n\r\n        let api = {\r\n            'get': () => {\r\n                axios.get(SERVER_ENDPOINT).then((res) => {\r\n                    store.dispatch(actions.api(type, res.data))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'post': (newMovie) => {\r\n                axios.post((SERVER_ENDPOINT), newMovie).then((res) => {\r\n                    store.dispatch(actions.api(type, newMovie))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'put': () => {\r\n                axios.put((SERVER_ENDPOINT + '/' + index + '/'), newData).then((res) => {\r\n                    store.dispatch(actions.api(type, newDatas))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            },\r\n            'delete': () => {\r\n                axios.delete(SERVER_ENDPOINT + '/' + index + '/').then((res) => {\r\n                    store.dispatch(actions.api(type, newDatas))\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            }\r\n        }\r\n\r\n        if (action.payload.first) {\r\n            let movies = action.payload.moviesList;\r\n            let data = [];\r\n\r\n            for (var i = 0; i < movies; ++i) {\r\n                axios.get(OMDb_API + '&t=' + movies[i].Title + '&y=' + movies[i].Year).then((response) => {\r\n                    let id = _generateMovieId(data);\r\n                    let movie = response.data;\r\n\r\n                    movie['id'] = id;\r\n                    data.push(movie);\r\n                    api['post']('ADD', movie)\r\n                })\r\n            }\r\n\r\n\r\n\r\n            function _generateMovieId(datas) {\r\n                let id = Math.floor((Math.random() * 1000) + 1);\r\n\r\n                while (_isIdExist(datas, id)) {\r\n                    id = Math.floor((Math.random() * 1000) + 1);\r\n                }\r\n\r\n                return id;\r\n            }\r\n\r\n            function _isIdExist(datas, id) {\r\n                let moviesList = this.props.general.moviesList;\r\n\r\n                for (var i = 0; i < datas.length; ++i) {\r\n                    let movie = datas[i];\r\n\r\n                    if (movie.id == id) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (type == 'ADD') {\r\n            let title = newData.title.replace(' ', '+');\r\n\r\n            axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then((respone) => {\r\n                let newMovie = respone.data;\r\n\r\n                newMovie['id'] = id;\r\n                if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\r\n                    api[method](newMovie);\r\n                    store.dispatch(actions.isMovieExist(false))\r\n                }\r\n                else {\r\n                    store.dispatch(actions.isMovieExist(true))\r\n                }\r\n            })\r\n                .catch((err) => console.log(err))\r\n        }\r\n        else {\r\n            api[method]();\r\n        }\r\n    }\r\n    return next(action)\r\n}"]},"metadata":{},"sourceType":"module"}