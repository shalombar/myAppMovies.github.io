{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shalombar\\\\Desktop\\\\moviesLibrary\\\\my-app\\\\src\\\\common\\\\Movies\\\\movie\\\\MovieDetails\\\\Buttons.js\";\nimport React, { Component } from 'react'; // import './App.css';\n\nvar Buttons =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Buttons, _Component);\n\n  function Buttons(props) {\n    var _this;\n\n    _classCallCheck(this, Buttons);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Buttons).call(this, props));\n    _this.state = {\n      \"imdbID\": '',\n      year: '',\n      runtime: '',\n      genre: '',\n      director: '',\n      inputsValidation: {\n        'year': true,\n        'runtime': true,\n        'genre': true,\n        'director': true\n      },\n      isValid: true\n    };\n    return _this;\n  }\n\n  _createClass(Buttons, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        \"imdbID\": this.props.item.imdbID,\n        year: this.props.item.Year,\n        runtime: this.props.item.Runtime,\n        genre: this.props.item.Genre,\n        director: this.props.item.Director\n      });\n    }\n  }, {\n    key: \"_setOpenModalKey\",\n    value: function _setOpenModalKey(key) {\n      this.props.setOpenModalKey(key);\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var newData = this._setDataToUpdate();\n\n      this.props.update(newData);\n    }\n  }, {\n    key: \"_setDataToUpdate\",\n    value: function _setDataToUpdate() {\n      var currentData = this.props.general.moviesList;\n\n      for (var i = 0; i < currentData.length; ++i) {\n        var movie = currentData[i];\n\n        if (movie.imdbID === this.state.imdbID) {\n          movie.Year = this.state.year;\n          movie.Runtime = this.state.runtime;\n          movie.Genre = this.state.genre;\n          movie.Director = this.state.director;\n        }\n      }\n\n      return currentData;\n    }\n  }, {\n    key: \"_validation\",\n    value: function _validation(inputCheck) {\n      var validationObj = {\n        'year': function year(val) {\n          if (isNaN(val) || val.length != 4 || val < 0) {\n            return {\n              status: 'error',\n              msg: 'year is not valid'\n            };\n          }\n\n          return {\n            status: 'ok'\n          };\n        },\n        'runtime': function runtime(val) {},\n        'genre': function genre(val) {},\n        'director': function director(val) {\n          var letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\n          var director = val.split(',');\n          director.forEach(function (item, index) {\n            if (!letters.test(item)) {\n              return {\n                status: 'error',\n                msg: 'input is not valid'\n              };\n            }\n          });\n          return {\n            status: 'ok' // if (letters.test(val)) {\n            //     return { status: 'ok' }\n            // }\n            // return {\n            //     status: 'error',\n            //     msg: 'input is not valid'\n            // }\n\n          };\n        }\n      };\n      var InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\n      var inputsValidation = this.state.inputsValidation;\n\n      if (InputValidation.status == 'error') {\n        this.refs[inputCheck].classList.add('invalid');\n        inputsValidation[inputCheck] = false;\n        this.setState({\n          isValid: false,\n          inputsValidation: inputsValidation\n        });\n      } else if (InputValidation.status == 'ok') {\n        if (this.refs[inputCheck].className.includes('invalid')) {\n          this.refs[inputCheck].classList.remove('invalid');\n          inputsValidation[inputCheck] = true;\n          this.setState({\n            isValid: true,\n            inputsValidation: inputsValidation\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_renderButtons\",\n    value: function _renderButtons() {\n      var _this2 = this;\n\n      try {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          \"data-toggle\": \"modal\",\n          \"data-target\": \"#update\",\n          onClick: function onClick() {\n            return _this2._setOpenModalKey(_this2.props.index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \"update\"), React.createElement(\"div\", {\n          className: \"modal\",\n          id: \"update\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-dialog\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"modal-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"modal-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Update Movie Details\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          onClick: function onClick() {\n            return _this2.props.setOpenModalKey(-99);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"\\xD7\")), React.createElement(\"div\", {\n          className: \"modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, 'Year: ', \" \"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"year\",\n          value: this.state.year,\n          ref: \"year\",\n          onChange: function onChange(e) {\n            _this2._validation('year');\n\n            _this2.setState({\n              'year': _this2.refs.year.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }), !this.state.inputsValidation['year'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, 'Runtime: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"runtime\",\n          value: this.state.runtime,\n          ref: \"runtime\",\n          onChange: function onChange(e) {\n            return _this2.setState({\n              'runtime': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }), !this.state.inputsValidation['runtime'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, 'Genre: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"genre\",\n          value: this.state.genre,\n          ref: \"genre\",\n          onChange: function onChange(e) {\n            return _this2.setState({\n              'genre': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }), !this.state.inputsValidation['genre'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Oops! Input invalid!\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, 'Director: '), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"director\",\n          value: this.state.director,\n          ref: \"director\",\n          onChange: function onChange(e) {\n            _this2._validation('director');\n\n            _this2.setState({\n              'director': e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }), !this.state.inputsValidation['director'] && React.createElement(\"span\", {\n          className: \"error-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"Oops! Input invalid!\"))), React.createElement(\"div\", {\n          className: \"modal-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": this.state.isValid ? \"modal\" : '',\n          onClick: function onClick() {\n            if (_this2.state.isValid) {\n              _this2.props.setOpenModalKey(-99);\n\n              _this2._update();\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Update\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          \"data-dismiss\": \"modal\",\n          onClick: function onClick() {\n            return _this2.props.setOpenModalKey(-99);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"Close\"))))));\n      } catch (err) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._renderButtons();\n    }\n  }]);\n\n  return Buttons;\n}(Component);\n\nexport default Buttons;","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\moviesLibrary\\my-app\\src\\common\\Movies\\movie\\MovieDetails\\Buttons.js"],"names":["React","Component","Buttons","props","state","year","runtime","genre","director","inputsValidation","isValid","setState","item","imdbID","Year","Runtime","Genre","Director","key","setOpenModalKey","newData","_setDataToUpdate","update","currentData","general","moviesList","i","length","movie","inputCheck","validationObj","val","isNaN","status","msg","letters","split","forEach","index","test","InputValidation","refs","value","classList","add","className","includes","remove","_setOpenModalKey","e","_validation","target","_update","err","_renderButtons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import './App.css';\r\n\r\nclass Buttons extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"imdbID\": '',\r\n            year: '',\r\n            runtime: '',\r\n            genre: '',\r\n            director: '',\r\n            inputsValidation: { 'year': true, 'runtime': true, 'genre': true, 'director': true },\r\n            isValid: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            \"imdbID\": this.props.item.imdbID,\r\n            year: this.props.item.Year,\r\n            runtime: this.props.item.Runtime,\r\n            genre: this.props.item.Genre,\r\n            director: this.props.item.Director,\r\n        })\r\n    }\r\n\r\n    _setOpenModalKey(key) {\r\n        this.props.setOpenModalKey(key)\r\n    }\r\n\r\n    _update() {\r\n        let newData = this._setDataToUpdate();\r\n\r\n        this.props.update(newData);\r\n    }\r\n\r\n    _setDataToUpdate() {\r\n        let currentData = this.props.general.moviesList;\r\n\r\n        for (var i = 0; i < currentData.length; ++i) {\r\n            let movie = currentData[i];\r\n\r\n            if (movie.imdbID === this.state.imdbID) {\r\n                movie.Year = this.state.year;\r\n                movie.Runtime = this.state.runtime;\r\n                movie.Genre = this.state.genre;\r\n                movie.Director = this.state.director;\r\n            }\r\n        }\r\n\r\n        return currentData;\r\n    }\r\n\r\n    _validation(inputCheck) {\r\n        let validationObj = {\r\n            'year': (val) => {\r\n                if (isNaN(val) || val.length != 4 || val < 0) {\r\n                    return {\r\n                        status: 'error',\r\n                        msg: 'year is not valid'\r\n                    }\r\n                }\r\n                return { status: 'ok' }\r\n            },\r\n            'runtime': (val) => {\r\n\r\n            },\r\n            'genre': (val) => {\r\n\r\n            },\r\n            'director': (val) => {\r\n                let letters = /^[A-Za-z]{2,}\\s[A-Za-z-']{3,}$/;\r\n                let director = val.split(',');\r\n\r\n                director.forEach((item, index) => {\r\n                    if (!letters.test(item)) {\r\n                        return {\r\n                            status: 'error',\r\n                            msg: 'input is not valid'\r\n                        }\r\n                    }\r\n                })\r\n                return { status: 'ok' }\r\n\r\n\r\n                // if (letters.test(val)) {\r\n                //     return { status: 'ok' }\r\n                // }\r\n\r\n                // return {\r\n                //     status: 'error',\r\n                //     msg: 'input is not valid'\r\n                // }\r\n            },\r\n        }\r\n        let InputValidation = validationObj[inputCheck](this.refs[inputCheck].value);\r\n        let { inputsValidation } = this.state;\r\n\r\n        if (InputValidation.status == 'error') {\r\n            this.refs[inputCheck].classList.add('invalid');\r\n            inputsValidation[inputCheck] = false;\r\n            this.setState({ isValid: false, inputsValidation });\r\n        }\r\n        else if (InputValidation.status == 'ok') {\r\n            if (this.refs[inputCheck].className.includes('invalid')) {\r\n                this.refs[inputCheck].classList.remove('invalid');\r\n                inputsValidation[inputCheck] = true;\r\n\r\n                this.setState({ isValid: true, inputsValidation })\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderButtons() {\r\n        try {\r\n            return (\r\n                <div className=\"container\">\r\n                    {/* Button to Open the Modal  */}\r\n                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#update\" onClick={() => this._setOpenModalKey(this.props.index)}>\r\n                        update\r\n                    </button>\r\n\r\n                    {/* The Modal  */}\r\n                    <div className=\"modal\" id=\"update\">\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n\r\n                                {/* Modal Header */}\r\n                                <div className=\"modal-header\">\r\n                                    <h4 className=\"modal-title\">Update Movie Details</h4>\r\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={() => this.props.setOpenModalKey(-99)}>&times;</button>\r\n                                </div>\r\n\r\n                                {/* Modal body  */}\r\n                                <div className=\"modal-body\">\r\n                                    <div><span>{'Year: '} </span><input type=\"text\" name=\"year\" value={this.state.year} ref='year' onChange={(e) => { this._validation('year'); this.setState({ 'year': this.refs.year.value }); }}></input>{!this.state.inputsValidation['year'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Runtime: '}</span><input type=\"text\" name=\"runtime\" value={this.state.runtime} ref='runtime' onChange={(e) => this.setState({ 'runtime': e.target.value })}></input>{!this.state.inputsValidation['runtime'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Genre: '}</span><input type=\"text\" name=\"genre\" value={this.state.genre} ref='genre' onChange={(e) => this.setState({ 'genre': e.target.value })}></input>{!this.state.inputsValidation['genre'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                    <div><span>{'Director: '}</span><input type=\"text\" name=\"director\" value={this.state.director} ref='director' onChange={(e) => { this._validation('director'); this.setState({ 'director': e.target.value }) }}></input>{!this.state.inputsValidation['director'] && <span className=\"error-message\">Oops! Input invalid!</span>}</div>\r\n                                </div>\r\n\r\n                                {/* Modal footer  */}\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss={this.state.isValid ? \"modal\" : ''} onClick={() => { if (this.state.isValid) { this.props.setOpenModalKey(-99); this._update() } }}>Update</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={() => this.props.setOpenModalKey(-99)}>Close</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n        catch (err) { }\r\n    }\r\n\r\n    render() {\r\n        return this._renderButtons()\r\n    }\r\n}\r\n\r\nexport default (Buttons);\r\n\r\n"]},"metadata":{},"sourceType":"module"}